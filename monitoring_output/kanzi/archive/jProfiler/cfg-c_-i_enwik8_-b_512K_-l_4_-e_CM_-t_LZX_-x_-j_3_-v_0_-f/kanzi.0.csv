"Hot Spot","Self Time Difference (microseconds)","Self Time Base (microseconds)","Invocations Difference","Invocations Base"
"kanzi.transform.ROLZCodec$ROLZEncoder.encode9Bits(int)",33008603,0,40049017,0
"kanzi.transform.ROLZCodec$ROLZEncoder.encodeBit(int)",27561936,0,386329503,0
"kanzi.transform.ROLZCodec$ROLZCodec2.findMatch(kanzi.SliceByteArray, int)",20183669,0,40047871,0
"kanzi.transform.ROLZCodec$ROLZCodec2.forward(kanzi.SliceByteArray, kanzi.SliceByteArray)",12096479,0,191,0
"kanzi.transform.ROLZCodec.hash(byte[ ], int)",6433634,0,40047871,0
"kanzi.transform.ROLZCodec.getKey(byte[ ], int)",6081050,0,40047871,0
"kanzi.Memory$LittleEndian.readInt32(byte[ ], int)",5990238,0,89685409,0
"kanzi.util.hash.XXHash32.hash(byte[ ], int, int)",4364482,0,191,0
"java.lang.Thread.yield()",3176425,0,6063758,0
"kanzi.transform.ROLZCodec$ROLZEncoder.setContext(byte)",2961850,0,45226496,0
"java.lang.Math.min(int, int)",2602057,0,40050226,0
"kanzi.Memory$LittleEndian.readInt16(byte[ ], int)",2564325,0,40047871,0
"kanzi.transform.ROLZCodec$ROLZEncoder.encodeBits(int, int)",2529184,0,5177670,0
"kanzi.util.hash.XXHash32.round(int, int)",1612455,0,25000000,0
"kanzi.io.CompressedOutputStream$EncodingTask.encodeBlock(kanzi.SliceByteArray, kanzi.SliceByteArray, int, long, int, int)",901733,32867,190,1
"kanzi.transform.ROLZCodec$ROLZEncoder.setMode(int)",771935,0,10355722,0
"kanzi.Memory$BigEndian.writeInt32(byte[ ], int, int)",540806,0,8000948,0
"java.lang.Integer.numberOfTrailingZeros(int)",444622,0,6924427,0
"java.util.concurrent.atomic.AtomicInteger.get()",398008,0,6064204,0
"kanzi.transform.ROLZCodec$ROLZCodec2.<init>(int, java.util.Map)",148232,0,191,0
"kanzi.transform.TextCodec$DictEntry.<init>(byte[ ], int, int, int, int)",107009,39947,1591296,524288
"kanzi.transform.TextCodec$TextCodec2.reset(int)",102434,30492,190,1
"kanzi.transform.TextCodec.computeStats(byte[ ], int, int, int[ ], boolean)",36630,147014,190,1
"kanzi.transform.ROLZCodec$ROLZEncoder.reset()",27316,0,191,0
"java.util.concurrent.ThreadPoolExecutor$Worker.run()",7118,0,3,0
"kanzi.transform.ROLZCodec$ROLZEncoder.<init>(int, int, kanzi.SliceByteArray)",6783,0,191,0
"java.util.concurrent.ExecutorService.invokeAll(java.util.Collection)",5858,0,64,0
"kanzi.transform.Sequence.forward(kanzi.SliceByteArray, kanzi.SliceByteArray)",2435,0,191,0
"java.nio.ByteOrder.nativeOrder()",2051,0,14,0
"kanzi.transform.ROLZCodec.<init>(java.util.Map)",1632,0,191,0
"java.lang.String.contains(java.lang.CharSequence)",1615,0,191,0
"java.util.HashMap.<init>(java.util.Map)",1554,0,191,0
"java.util.Map.getOrDefault(java.lang.Object, java.lang.Object)",1120,0,1339,0
"kanzi.transform.Sequence.getMaxEncodedLength(int)",988,0,382,0
"java.util.Map.put(java.lang.Object, java.lang.Object)",944,0,979,0
"java.nio.file.Files.isRegularFile(java.nio.file.Path, java.nio.file.LinkOption[ ])",754,0,2,0
"kanzi.app.Kanzi.processCommandLine(java.lang.String[ ], java.util.Map)",601,0,1,0
"kanzi.transform.TextCodec.isUpperCase(byte)",598,0,5487,0
"java.lang.Integer.valueOf(int)",585,0,964,0
"kanzi.io.CompressedOutputStream$EncodingTask._get_skipBlocks(java.util.Map)",542,0,191,0
"kanzi.transform.TransformFactory.getTypeToken(java.lang.String)",502,0,6,0
"kanzi.Global.positiveOrNull(int)",453,0,3895,0
"kanzi.bitstream.DefaultOutputBitStream.close()",451,0,192,0
"java.lang.String.toUpperCase()",440,0,202,0
"java.lang.Character.valueOf(char)",438,0,1,0
"kanzi.transform.ROLZCodec$ROLZEncoder.dispose()",406,0,191,0
"kanzi.transform.FSDCodec.forward(kanzi.SliceByteArray, kanzi.SliceByteArray)",390,0,191,0
"java.lang.String.equals(java.lang.Object)",387,0,535,0
"kanzi.Global.log2(int)",366,0,764,0
"java.lang.Math.max(int, int)",350,0,1274,0
"kanzi.transform.TextCodec.forward(kanzi.SliceByteArray, kanzi.SliceByteArray)",347,0,191,0
"kanzi.bitstream.DefaultOutputBitStream.<init>(java.io.OutputStream, int)",345,0,192,0
"java.lang.Integer.numberOfLeadingZeros(int)",333,0,764,0
"java.lang.String.split(java.lang.String)",332,0,3,0
"kanzi.entropy.NullEntropyEncoder.encode(byte[ ], int, int)",321,0,191,0
"kanzi.transform.TextCodec.<clinit>()",311,0,1,0
"kanzi.bitstream.DefaultOutputBitStream.isClosed()",274,0,2761,0
"kanzi.transform.TextCodec$TextCodec2.getMaxEncodedLength(int)",271,0,764,0
"kanzi.transform.FSDCodec.getMaxEncodedLength(int)",269,0,573,0
"java.lang.Boolean.valueOf(boolean)",261,0,388,0
"kanzi.transform.TextCodec$TextCodec2.emitSymbols(byte[ ], int, byte[ ], int, int, int)",-4557,462712,96252,4625539
"kanzi.Global.computeHistogramOrder0(byte[ ], int, int, int[ ], boolean)",-38273,38273,-1028,1028
"kanzi.io.CompressedOutputStream.<init>(kanzi.OutputBitStream, java.util.Map)",-40020,43035,0,1
"kanzi.transform.DivSufSort.trMedian3(int[ ], int, int, int, int)",-44027,44027,-335626,335626
"kanzi.transform.TextCodec.isDelimiter(byte)",-46602,1082185,-68,13861126
"kanzi.transform.DivSufSort.ssMedian5(int, int, int, int, int, int, int)",-63508,63508,-447834,447834
"kanzi.transform.DivSufSort.ssMedian3(int, int, int, int, int)",-73526,73526,-543208,543208
"kanzi.transform.BWT.forward(kanzi.SliceByteArray, kanzi.SliceByteArray)",-74951,74951,-1,1
"kanzi.transform.DivSufSort.computeBWT(byte[ ], byte[ ], int[ ], int, int, int, int[ ], int)",-84152,84152,-1,1
"kanzi.transform.DivSufSort.ssIlg(int)",-89948,89948,-879443,879443
"kanzi.transform.DivSufSort.ssPartition(int, int, int, int)",-98096,98096,-437100,437100
"kanzi.transform.DivSufSort$TRBudget.check(int)",-109845,109845,-1121148,1121148
"kanzi.transform.DivSufSort.trPivot(int[ ], int, int, int)",-111359,111359,-535018,535018
"kanzi.Memory$BigEndian.writeLong64(byte[ ], int, long)",-159085,368975,-2031334,5283283
"kanzi.Memory$BigEndian.readLong64(byte[ ], int)",-189873,397993,-2014614,5266221
"kanzi.transform.DivSufSort.ssPivot(int, int, int, int)",-197945,197945,-895009,895009
"kanzi.transform.DivSufSort.trSort(int, int)",-232047,232047,-1,1
"kanzi.transform.DivSufSort$Stack.push(int, int, int, int, int)",-243889,243889,-2539457,2539457
"kanzi.transform.ZRLT.forward(kanzi.SliceByteArray, kanzi.SliceByteArray)",-246319,246319,-1,1
"kanzi.transform.DivSufSort.trIlg(int)",-287614,287614,-2923260,2923260
"kanzi.transform.TextCodec$TextCodec2.emitWordIndex(byte[ ], int, int, int)",-325597,1039165,-2272124,12697965
"kanzi.bitstream.DefaultOutputBitStream.writeBits(byte[ ], int, int)",-361948,878841,-647,1029
"kanzi.bitstream.DefaultOutputBitStream.pushCurrent()",-379172,844488,-2031334,5283283
"kanzi.transform.DivSufSort$Stack.pop()",-404963,404963,-3947293,3947293
"kanzi.transform.TextCodec.sameWords(byte[ ], int, byte[ ], int, int)",-463694,1350314,-2272124,12697965
"kanzi.transform.TextCodec.isText(byte)",-558725,15240674,24472,100005616
"kanzi.transform.DivSufSort.trInsertionSort(int, int, int)",-600885,600885,-2977117,2977117
"kanzi.transform.TextCodec.isLowerCase(byte)",-626134,7055582,24472,100005616
"kanzi.transform.DivSufSort.sortTypeBstar(int[ ], int[ ], int)",-683166,683166,-1,1
"kanzi.transform.TextCodec$TextCodec2.forward(kanzi.SliceByteArray, kanzi.SliceByteArray)",-880643,13464763,190,1
"kanzi.transform.DivSufSort.ssMergeBackward(int, int, int, int, int, int)",-934500,934500,-2169,2169
"kanzi.transform.SBRT.forward(kanzi.SliceByteArray, kanzi.SliceByteArray)",-956931,956931,-1,1
"kanzi.transform.DivSufSort.trPartition(int, int, int, int, int)",-1290470,1290470,-535262,535262
"kanzi.transform.DivSufSort.trIntroSort(int, int, int, int, kanzi.transform.DivSufSort$TRBudget)",-1403889,1403889,-1382349,1382349
"kanzi.transform.DivSufSort.constructBWT(int[ ], int[ ], int, int, int[ ], int)",-1683686,1683686,-1,1
"kanzi.transform.DivSufSort.ssInsertionSort(int, int, int, int)",-2221062,2221062,-1170187,1170187
"kanzi.entropy.ANSRangeEncoder.encodeSymbol(int[ ], int, kanzi.entropy.ANSRangeEncoder$Symbol)",-2462807,2462807,-33678300,33678300
"kanzi.entropy.ANSRangeEncoder.encodeChunk(byte[ ], int, int)",-2831974,2831974,-1028,1028
"kanzi.transform.DivSufSort.ssCompare(int, int, int)",-3320133,3320133,-30272617,30272617
"kanzi.transform.DivSufSort.swapInSA(int, int)",-4841531,4841531,-62866167,62866167
"kanzi.transform.DivSufSort.ssMultiKeyIntroSort(int, int, int, int)",-7787177,7787177,-23318,23318
